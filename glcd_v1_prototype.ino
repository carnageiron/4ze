#include <Adafruit_GFX.h>   // Core graphics library for drawing shapes/text
#include <KS0108_GLCD.h>    // Library for KS0108-based graphic LCD modules

// Initialize KS0108 display: pins DB0–DB7 (2–9), RS, RW, E pins, and two chip selects on A2/A3, A4
KS0108_GLCD display = KS0108_GLCD(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, A2, A3, A4);

#define BUTTON_PIN    A0      // Define the analog pin A0 as the button input pin
#define debounceDelay 200     // Debounce delay in milliseconds
unsigned long lastButtonPress = 0;  // Timestamp of last valid button press
int menuIndex = 0;                  // Currently displayed menu index
const int totalMenus = 4;          // Total number of menu screens

// Logo dimensions (should match bitmap's size)
#define LOGO_WIDTH   128     
#define LOGO_HEIGHT   64     

// Bitmap data stored in program memory (PROGMEM) for the logo
static const unsigned char PROGMEM logo_bmp[] = {
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B01100000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B11000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000001, 0B11000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000011, 0B11000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000111, 0B11000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00011111, 0B11000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00111111, 0B10000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B01111111, 0B10000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B11111111, 0B10000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000001, 0B11111111, 0B10000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00001111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00011111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B01111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000001, 
  0B11111111, 0B11111110, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000011, 
  0B11111111, 0B11111110, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000111, 
  0B11111111, 0B11111110, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00001111, 
  0B11011111, 0B11111110, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00111111, 
  0B11111111, 0B11111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11111100, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B01111111, 
  0B11111111, 0B11111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11111000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B11111111, 
  0B11111111, 0B11111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11100000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000001, 0B11111111, 
  0B11111111, 0B11111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000011, 0B11111111, 
  0B11111111, 0B11111111, 0B11111111, 0B11111111, 
  0B11111111, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00001111, 0B11111111, 
  0B11111111, 0B11111111, 0B11111111, 0B11111111, 
  0B11111111, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11111000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11111011, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B11110000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11111011, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B11100000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11111011, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B11100000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11110011, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B11100000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11110011, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B11100000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11110000, 0B00000001, 0B11111110, 
  0B11111111, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11110000, 0B00000011, 0B11111100, 
  0B11111110, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11100000, 0B00000111, 0B11111000, 
  0B11111110, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11100000, 0B00001111, 0B11110000, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11100000, 0B00111111, 0B11100001, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11100000, 0B01111111, 0B10000001, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11100000, 0B11111111, 0B00000001, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11000001, 0B11111110, 0B00000001, 
  0B11111100, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11000011, 0B11111100, 0B00000001, 
  0B11111100, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11001111, 0B11110000, 0B00000011, 
  0B11111100, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B11011111, 0B11100000, 0B00000011, 
  0B11111111, 0B11111111, 0B10000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B10011111, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B10000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B10111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B10111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B10111111, 0B11111111, 0B11111111, 
  0B11111111, 0B11111111, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B01111111, 0B11000000, 0B11111000, 
  0B00011111, 0B10000111, 0B10011110, 0B00111000, 
  0B01111111, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B01111111, 0B11100000, 0B11111000, 
  0B01111111, 0B11000111, 0B00111110, 0B00111000, 
  0B11111111, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B01111001, 0B11100001, 0B11111000, 
  0B01111001, 0B11100111, 0B00111111, 0B00111001, 
  0B11100011, 0B11000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000011, 0B01110001, 0B11100001, 0B11111000, 
  0B11110001, 0B11101111, 0B00111111, 0B00111011, 
  0B11000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000010, 0B01111111, 0B11100011, 0B10111100, 
  0B11110000, 0B00001111, 0B00111111, 0B11111011, 
  0B11000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000010, 0B11111111, 0B11000011, 0B10111100, 
  0B11110000, 0B00001111, 0B00111011, 0B11110011, 
  0B11001111, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000010, 0B11110111, 0B10000111, 0B11111100, 
  0B11110001, 0B11001110, 0B01111011, 0B11110011, 
  0B11011111, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000010, 0B11110011, 0B10001111, 0B11111100, 
  0B11110011, 0B11001110, 0B01110001, 0B11110011, 
  0B11100111, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000010, 0B11100011, 0B11001110, 0B00011100, 
  0B01111111, 0B10011110, 0B01110000, 0B11110001, 
  0B11111111, 0B10000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000001, 0B11100011, 0B11011100, 0B00011110, 
  0B00111111, 0B00011110, 0B01110000, 0B11100000, 
  0B11111111, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000, 
  0B00000000, 0B00000000, 0B00000000, 0B00000000
};

void setup() {
    Serial.begin(9600);  // Start serial communication at 9600 baud
    pinMode(BUTTON_PIN, INPUT_PULLUP);  // Set button pin as input with internal pull-up

    // Initialize the KS0108 display; retry until successful
    if (display.begin(KS0108_CS_ACTIVE_HIGH) == false) {
        Serial.println(F("Display initialization failed!")); 
        while (true);  // Stop execution if display init fails
    }

    display.clearDisplay(); // Clear any previous content on display buffer
    testdrawbitmap();       // Draw the logo bitmap once at startup
    delay(3000);            // Pause for 3 seconds to show the logo
    displayMenu(menuIndex); // Show the first menu screen (index 0)
}

void loop() {
    // Check if button is pressed (LOW because of pull-up) and debounce time has passed
    if (digitalRead(BUTTON_PIN) == LOW && millis() - lastButtonPress > debounceDelay) {
        lastButtonPress = millis();         // Record the timestamp of this valid press
        menuIndex = (menuIndex + 1) % totalMenus; // Cycle to next menu index
        displayMenu(menuIndex);            // Update display with new menu
    }
}

// Show bitmap centered on the display
void testdrawbitmap() {
    display.clearDisplay(); 
    display.drawBitmap(
        (display.width()  - LOGO_WIDTH) / 2,  // X center position
        (display.height() - LOGO_HEIGHT) / 2, // Y center position
        logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1  // Bitmap data and color
    );
    display.display(); // Push buffer to screen
    delay(1000);       // Wait 1 second (show bitmap)
}

// Display the menu based on index (0–3)
void displayMenu(int index) {
  display.clearDisplay();       // Clear buffer
  display.setTextSize(5);       // Use large text for primary metric

  switch (index) {
    case 0:
      display.setTextColor(KS0108_ON);  // Turn on drawing color
      display.print(speed());           // Print speed value
      display.setTextSize(2);          // Smaller font for units
      display.setCursor(65, 32);       // Move cursor to position
      display.print(F("KM/H"));        // Print units label
      display.display();               // Render to screen
      break;

    case 1:
      display.setTextColor(KS0108_ON);
      display.print(battery_cap());    // Print battery capacity %
      display.setCursor(65, 32);
      display.print(F("%"));           // Percentage sign
      display.display();
      break;

    case 2:
      display.setTextColor(KS0108_ON);
      display.print(voltage());        // Print voltage value
      display.setTextSize(2);
      display.setCursor(65, 32);
      display.print(F("V"));           // Voltage unit label
      display.display();
      break;

    case 3:
      display.setTextColor(KS0108_ON);
      display.print(soh());            // Print State of Health %
      display.setTextSize(2);
      display.setCursor(65, 32);
      display.print(F("%"));           // Percentage label
      display.display();
      break;
  }
}

// Read raw analog, map to 0–100 for speed display
float speed() { 
  int s = analogRead(A1);                    
  int s1 = map(s, 0, 1023, 0, 100);          
  return s1;                                 
}

// Read analog for battery %, map to 0–100
float battery_cap() { 
  int b = analogRead(A5);
  int b1 = map(b, 0, 1023, 0, 100);
  return b1;
}

// Read analog for voltage, map 0–1023 to 0–350 V
float voltage() {
  int v = analogRead(A6);
  int v1 = map(v, 0, 1023, 0, 350);  
  return v1;
}

// Read analog for SOH, map to 0–100%
float soh() {
  int sh = analogRead(A7);
  int sh1 = map(sh, 0, 1023, 0, 100);
  return sh1;
} 
