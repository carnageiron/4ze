#include <Adafruit_GFX.h>   // Include Adafruit GFX library
#include <KS0108_GLCD.h>  //Include KS0108 GLCD
#define LOGO_WIDTH 128
#define LOGO_HEIGHT 64
#define DI_PIN 13  // GPIO13 (D7)
#define RW_PIN 12  // GPIO12 (D6)
#define E_PIN  14  // GPIO14 (D5)
#define DB0_PIN 16 // GPIO16 (D0)
#define DB1_PIN 5  // GPIO5 (D1)
#define DB2_PIN 4  // GPIO4 (D2)
#define DB3_PIN 0  // GPIO0 (D3)
#define DB4_PIN 2  // GPIO2 (D4)
#define DB5_PIN 15 // GPIO15 (D8)
// Note: ESP8266 doesn't have D9/D10, using alternative pins
#define DB6_PIN 3  // GPIO3 (RX) - be careful as this is also serial RX
#define DB7_PIN 1  // GPIO1 (TX) - be careful as this is also serial TX
#define CS1_PIN 10 // GPIO10 (SD3) - might not be available on all boards
#define CS2_PIN 9  // GPIO9 (SD2) - might not be available on all boards
#define RES_PIN 8  // GPIO8 (SD1) - might not be available on all boards

// Button and analog pins
#define BUTTON_PIN 3  // GPIO3 (RX) - same as DB6, you'll need to change this
#define CAPACITY_PIN A0
// Note: ESP8266 only has one analog input (A0)

int currentScreen = 0;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 200;

// Initialize KS0108 GLCD
KS0108_GLCD display = KS0108_GLCD(DI_PIN, RW_PIN, E_PIN, DB0_PIN, DB1_PIN, DB2_PIN, DB3_PIN, 
                                 DB4_PIN, DB5_PIN, DB6_PIN, DB7_PIN, CS1_PIN, CS2_PIN, RES_PIN);

// Menu index
int currentMenuIndex = 0;
const int numMenuItems = 4;

// Simulated battery and vehicle data
float speed = 37.5;             // km/h
float batteryCapacity = 78.2;   // %
float stateOfHealth = 95.6;     // %
float batteryVoltage = 51.4;    // V

// Bitmap logo data (same as original)
static const unsigned char PROGMEM logo_bmp[] = {
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B01100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000001, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000011, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000111, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00011111, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B01111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000001, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00001111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00011111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B01111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000001, 
0B11111111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000011, 
0B11111111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000111, 
0B11111111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00001111, 
0B11011111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111100, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B01111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11100000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000001, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000011, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00001111, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11110000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110000, 0B00000001, 0B11111110, 
0B11111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110000, 0B00000011, 0B11111100, 
0B11111110, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B00000111, 0B11111000, 
0B11111110, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B00001111, 0B11110000, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B00111111, 0B11100001, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B01111111, 0B10000001, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B11111111, 0B00000001, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11000001, 0B11111110, 0B00000001, 
0B11111100, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11000011, 0B11111100, 0B00000001, 
0B11111100, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11001111, 0B11110000, 0B00000011, 
0B11111100, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11011111, 0B11100000, 0B00000011, 
0B11111111, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10011111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01111111, 0B11000000, 0B11111000, 
0B00011111, 0B10000111, 0B10011110, 0B00111000, 
0B01111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01111111, 0B11100000, 0B11111000, 
0B01111111, 0B11000111, 0B00111110, 0B00111000, 
0B11111111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01111001, 0B11100001, 0B11111000, 
0B01111001, 0B11100111, 0B00111111, 0B00111001, 
0B11100011, 0B11000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01110001, 0B11100001, 0B11111000, 
0B11110001, 0B11101111, 0B00111111, 0B00111011, 
0B11000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B01111111, 0B11100011, 0B10111100, 
0B11110000, 0B00001111, 0B00111111, 0B11111011, 
0B11000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11111111, 0B11000011, 0B10111100, 
0B11110000, 0B00001111, 0B00111011, 0B11110011, 
0B11001111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11110111, 0B10000111, 0B11111100, 
0B11110001, 0B11001110, 0B01111011, 0B11110011, 
0B11011111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11110011, 0B10001111, 0B11111100, 
0B11110011, 0B11001110, 0B01110001, 0B11110011, 
0B11100111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11100011, 0B11001110, 0B00011100, 
0B01111111, 0B10011110, 0B01110000, 0B11110001, 
0B11111111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000001, 0B11100011, 0B11011100, 0B00011110, 
0B00111111, 0B00011110, 0B01110000, 0B11100000, 
0B11111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000
};

void setup() {
    Serial.begin(9600);

    pinMode(BUTTON_PIN, INPUT_PULLUP);

    // Initialize the display
    if (display.begin(KS0108_CS_ACTIVE_HIGH) == false) {
        Serial.println(F("Display initialization failed!"));
        while (true);  // Stay here forever
    }

    display.clearDisplay(); // Clear the buffer
    testdrawbitmap();       // Draw a small bitmap image
    delay(1000);
    testdrawstyles();       // Draw stylized characters
}

void loop() {
    // Handle button press with debounce
    static bool lastButtonState = HIGH;
    bool buttonState = digitalRead(BUTTON_PIN);

    if (buttonState == LOW && lastButtonState == HIGH && millis() - lastDebounceTime > debounceDelay) {
        currentScreen = (currentScreen + 1) % 4;
        lastDebounceTime = millis();
        updateDisplay();
    }

    lastButtonState = buttonState;
    testdrawstyles(); 
}

// Function to update the screen based on current menu
void updateDisplay() {
  display.clearDisplay();
  display.setTextSize(1);

  switch (currentScreen) {
    case 0:
      displaySpeed();
      break;
    case 1:
      displayCapacity();
      break;
    case 2:
      displayHealth();
      break;
    case 3:
      displayVoltage();
      break;
  }
  display.display();
}

// Function to draw a bitmap
void testdrawbitmap() {
    display.clearDisplay();
    display.drawBitmap(
        (display.width()  - LOGO_WIDTH) / 2,
        (display.height() - LOGO_HEIGHT) / 2,
        logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    display.display();
    delay(3000);
}

// Function to display text styles
void testdrawstyles() {
    display.clearDisplay();
    display.setTextSize(1);             // Normal 1:1 pixel scale
    display.setTextColor(KS0108_ON);    // Draw white text
    display.setCursor(0, 0);           // Start at top-left corner
    display.println("Display Test");
    display.display();
}

// Analog read conversion functions
void displaySpeed() {
  int val = analogRead(A0);             // Read analog value from ESP8266's only analog pin
  float speed = map(val, 0, 1023, 0, 100); // ESP8266 has 10-bit ADC (0-1023)
  display.setCursor(0, 10);
  display.print("Speed:");
  display.setCursor(0, 20);
  display.print(speed, 1);
  display.print(" km/h");
}

void displayCapacity() {
  int val = analogRead(A0);             // Note: ESP8266 only has one analog input
  float percent = map(val, 0, 1023, 0, 100);
  display.setCursor(0, 10);
  display.print("Battery Capacity:");
  display.setCursor(0, 20);
  display.print(percent, 1);
  display.print(" %");
}

void displayHealth() {
  int val = analogRead(A0);             // Note: ESP8266 only has one analog input
  float health = map(val, 0, 1023, 80, 100); // Assume health is 80-100%
  display.setCursor(0, 10);
  display.print("State of Health:");
  display.setCursor(0, 20);
  display.print(health, 1);
  display.print(" %");
}

void displayVoltage() {
  int val = analogRead(A0);
  float voltage = (val / 1023.0) * 3.3 * 2.0;  // Assuming voltage divider by 2
  display.setCursor(0, 10);
  display.print("Battery Voltage:");
  display.setCursor(0, 20);
  display.print(voltage, 2);
  display.print(" V");
}
