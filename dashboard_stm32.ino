#include "stm32f4xx_hal.h"
#include "ks0108_glcd.h"  // You'll need a KS0108 library compatible with STM32

// STM32 pin mapping for KS0108 GLCD
// Adjust these based on your specific STM32 board pinout
#define DI_PIN  GPIO_PIN_0
#define DI_PORT GPIOA
#define RW_PIN  GPIO_PIN_1
#define RW_PORT GPIOA
#define E_PIN   GPIO_PIN_2
#define E_PORT  GPIOA
#define DB0_PIN GPIO_PIN_3
#define DB0_PORT GPIOA
#define DB1_PIN GPIO_PIN_4
#define DB1_PORT GPIOA
#define DB2_PIN GPIO_PIN_5
#define DB2_PORT GPIOA
#define DB3_PIN GPIO_PIN_6
#define DB3_PORT GPIOA
#define DB4_PIN GPIO_PIN_7
#define DB4_PORT GPIOA
#define DB5_PIN GPIO_PIN_8
#define DB5_PORT GPIOA
#define DB6_PIN GPIO_PIN_9
#define DB6_PORT GPIOA
#define DB7_PIN GPIO_PIN_10
#define DB7_PORT GPIOA
#define CS1_PIN GPIO_PIN_11
#define CS1_PORT GPIOA
#define CS2_PIN GPIO_PIN_12
#define CS2_PORT GPIOA
#define RES_PIN GPIO_PIN_13
#define RES_PORT GPIOA

// Button and ADC pins
#define BUTTON_PIN GPIO_PIN_0
#define BUTTON_PORT GPIOB
#define CAPACITY_PIN GPIO_PIN_1
#define HEALTH_PIN GPIO_PIN_2
#define VOLTAGE_PIN GPIO_PIN_3
#define ADC_PORT GPIOB

// Global variables
int currentScreen = 0;
uint32_t lastDebounceTime = 0;
const uint32_t debounceDelay = 200;
int currentMenuIndex = 0;
const int numMenuItems = 4;

// Simulated battery and vehicle data
float speed = 37.5f;             // km/h
float batteryCapacity = 78.2f;   // %
float stateOfHealth = 95.6f;     // %
float batteryVoltage = 51.4f;    // V

// Bitmap logo data
static const unsigned char logo_bmp[] = {
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B01100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000001, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000011, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000111, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00011111, 0B11000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B01111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000001, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00001111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00011111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B01111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000001, 
0B11111111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000011, 
0B11111111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000111, 
0B11111111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00001111, 
0B11011111, 0B11111110, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111100, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B01111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11100000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000001, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B11000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000011, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00001111, 0B11111111, 
0B11111111, 0B11111111, 0B11111111, 0B11111111, 
0B11111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11110000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11111011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110011, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B11100000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110000, 0B00000001, 0B11111110, 
0B11111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11110000, 0B00000011, 0B11111100, 
0B11111110, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B00000111, 0B11111000, 
0B11111110, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B00001111, 0B11110000, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B00111111, 0B11100001, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B01111111, 0B10000001, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11100000, 0B11111111, 0B00000001, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11000001, 0B11111110, 0B00000001, 
0B11111100, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11000011, 0B11111100, 0B00000001, 
0B11111100, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11001111, 0B11110000, 0B00000011, 
0B11111100, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B11011111, 0B11100000, 0B00000011, 
0B11111111, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10011111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B10000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10111111, 0B11111111, 0B11111111, 
0B11111111, 0B11111111, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01111111, 0B11000000, 0B11111000, 
0B00011111, 0B10000111, 0B10011110, 0B00111000, 
0B01111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01111111, 0B11100000, 0B11111000, 
0B01111111, 0B11000111, 0B00111110, 0B00111000, 
0B11111111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01111001, 0B11100001, 0B11111000, 
0B01111001, 0B11100111, 0B00111111, 0B00111001, 
0B11100011, 0B11000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000011, 0B01110001, 0B11100001, 0B11111000, 
0B11110001, 0B11101111, 0B00111111, 0B00111011, 
0B11000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B01111111, 0B11100011, 0B10111100, 
0B11110000, 0B00001111, 0B00111111, 0B11111011, 
0B11000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11111111, 0B11000011, 0B10111100, 
0B11110000, 0B00001111, 0B00111011, 0B11110011, 
0B11001111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11110111, 0B10000111, 0B11111100, 
0B11110001, 0B11001110, 0B01111011, 0B11110011, 
0B11011111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11110011, 0B10001111, 0B11111100, 
0B11110011, 0B11001110, 0B01110001, 0B11110011, 
0B11100111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000010, 0B11100011, 0B11001110, 0B00011100, 
0B01111111, 0B10011110, 0B01110000, 0B11110001, 
0B11111111, 0B10000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000001, 0B11100011, 0B11011100, 0B00011110, 
0B00111111, 0B00011110, 0B01110000, 0B11100000, 
0B11111111, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000, 
0B00000000, 0B00000000, 0B00000000, 0B00000000

};

// LCD handle
KS0108_GLCD display;

// ADC handle
ADC_HandleTypeDef hadc1;

// Function prototypes
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
void updateDisplay(void);
void testdrawbitmap(void);
void testdrawstyles(void);
void displaySpeed(void);
void displayCapacity(void);
void displayHealth(void);
void displayVoltage(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_ADC1_Init();
    
    // Initialize UART for debugging
    // MX_USART1_UART_Init(); // Uncomment if using serial debug
    
    // Initialize the GLCD
    display = KS0108_GLCD(DI_PIN, RW_PIN, E_PIN, DB0_PIN, DB1_PIN, DB2_PIN, DB3_PIN,
                         DB4_PIN, DB5_PIN, DB6_PIN, DB7_PIN, CS1_PIN, CS2_PIN, RES_PIN);
    
    if (display.begin() == false) {
        // Handle initialization failure
        while (1);
    }
    
    display.clearDisplay();
    testdrawbitmap();
    HAL_Delay(1000);
    testdrawstyles();
    
    while (1) {
        // Handle button press with debounce
        static GPIO_PinState lastButtonState = GPIO_PIN_SET;
        GPIO_PinState buttonState = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
        
        if (buttonState == GPIO_PIN_RESET && lastButtonState == GPIO_PIN_SET && 
            HAL_GetTick() - lastDebounceTime > debounceDelay) {
            currentScreen = (currentScreen + 1) % 4;
            lastDebounceTime = HAL_GetTick();
            updateDisplay();
        }
        
        lastButtonState = buttonState;
        testdrawstyles();
        
        // Optional: Enter low power mode when idle
        // HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    }
}

void SystemClock_Config(void) {
    // Configure your system clock here
    // This depends on your specific STM32 model and clock requirements
}

static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    
    // Enable GPIO clocks
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    
    // Configure button input
    GPIO_InitStruct.Pin = BUTTON_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
    
    // Note: The GLCD pins are initialized by the KS0108 library
}

static void MX_ADC1_Init(void) {
    ADC_ChannelConfTypeDef sConfig = {0};
    
    hadc1.Instance = ADC1;
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    hadc1.Init.ScanConvMode = DISABLE;
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.NbrOfConversion = 1;
    hadc1.Init.DMAContinuousRequests = DISABLE;
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
    HAL_ADC_Init(&hadc1);
    
    // Configure ADC channel for capacity
    sConfig.Channel = ADC_CHANNEL_1; // PB1 = ADC1_IN9
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
    
    // Repeat for other ADC channels as needed
}

void updateDisplay() {
    display.clearDisplay();
    display.SelectFont(System5x7);
    
    switch (currentScreen) {
        case 0:
            displaySpeed();
            break;
        case 1:
            displayCapacity();
            break;
        case 2:
            displayHealth();
            break;
        case 3:
            displayVoltage();
            break;
    }
}

void testdrawbitmap() {
    display.clearDisplay();
    display.drawBitmap(
        (display.width() - LOGO_WIDTH) / 2,
        (display.height() - LOGO_HEIGHT) / 2,
        logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
    display.display();
    HAL_Delay(3000);
}

void testdrawstyles() {
    display.clearDisplay();
    display.setTextSize(5);
    display.setTextColor(KS0108_ON);
    display.setCursor(5, 15);
    display.setTextSize(2);
    display.setCursor(65, 32);
    display.display();
}

uint16_t readADC(ADC_HandleTypeDef* hadc, uint32_t channel) {
    ADC_ChannelConfTypeDef sConfig = {0};
    sConfig.Channel = channel;
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
    HAL_ADC_ConfigChannel(hadc, &sConfig);
    
    HAL_ADC_Start(hadc);
    HAL_ADC_PollForConversion(hadc, 10);
    uint16_t val = HAL_ADC_GetValue(hadc);
    HAL_ADC_Stop(hadc);
    
    return val;
}

void displaySpeed() {
    uint16_t val = readADC(&hadc1, ADC_CHANNEL_1);
    speed = val / 4095.0f * 100.0f; // Convert to 0-100 km/h
    display.print("Speed:");
    display.CursorTo(0, 2);
    display.print(speed, 1);
    display.print(" km/h");
}

void displayCapacity() {
    uint16_t val = readADC(&hadc1, ADC_CHANNEL_9); // PB1 = ADC1_IN9
    batteryCapacity = val / 4095.0f * 100.0f;
    display.print("Battery Capacity:");
    display.CursorTo(0, 2);
    display.print(batteryCapacity, 1);
    display.print(" %");
}

void displayHealth() {
    uint16_t val = readADC(&hadc1, ADC_CHANNEL_8); // PB0 = ADC1_IN8
    stateOfHealth = 80.0f + (val / 4095.0f * 20.0f); // 80-100%
    display.print("State of Health:");
    display.CursorTo(0, 2);
    display.print(stateOfHealth, 1);
    display.print(" %");
}

void displayVoltage() {
    uint16_t val = readADC(&hadc1, ADC_CHANNEL_3); // PB3 = ADC1_IN3
    batteryVoltage = (val / 4095.0f) * 3.3f * 2.0f; // Voltage divider by 2
    display.print("Battery Voltage:");
    display.CursorTo(0, 2);
    display.print(batteryVoltage, 2);
    display.print(" V");
}